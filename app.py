#–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from dash import Dash, html, dcc, callback, Output, Input
import dash_bootstrap_components as dbc
from dash import dash_table
import pandas as pd
import plotly.express as px
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import os 
import glob

#—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
path = os.getcwd() 
csv_files = glob.glob(os.path.join(path, '*.csv')) 

for f in csv_files: 
    df = pd.read_csv(f)

data = df[((df['job_title'] == 'Data Analyst') | (df['job_title'] == 'Data Scientist') | (df['job_title'] == 'Data Engineer'))&
            (df['work_year'].isin([2020,2021,2022,2023]))]
data['month_salary'] = round(data['salary_in_usd']/12)
bar_graph_df = data.groupby(['experience_level', 'job_title'], as_index = False)['month_salary'].mean().round().sort_values(by = 'month_salary')

#–°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥—ç—à–±–æ—Ä–¥–∞
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

#–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∑–∞–π–Ω–∞ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
graphs_template = go.layout.Template(
    layout = dict(font = dict(family = 'Times New Roman', size = 14),
        legend = dict(
            orientation = 'h', 
            title_text = '',
            x = 0,
            y = 1.1
        )
    )
)

color_values = ['#EEC6F8', '#D86BF3', '#8E1AAA']


#—Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
filter_country= dcc.Dropdown(
                data['company_location'].unique(),
                id = 'dropdown_country',
                value = 'United States',
                multi = False)

filter_job = dcc.Dropdown(
                data['job_title'].unique(),
                id = 'dropdown_job',
                value = 'Data Scientist',
                multi = False)

tbl = dash_table.DataTable(data = data.head(20).to_dict('records'), 
                           columns = [{'name': i, 'id': i} for i in data], 
                           style_data = {'width': '100px',
                                        'maxWidth':'100px', 
                                        'minWidth':'100px'},
                            style_header= {'textAlign':'center'})

#—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫

#–ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
tab1_content = [dbc.Row([
        dbc.Col([html.H4('–°—Ç—Ä–∞–Ω–∞'), html.Div(filter_country)]),
        dbc.Col([html.H4('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å'), html.Div(filter_job)])], style = {'margin-bottom': 30}),
    dbc.Row([
        dbc.Col(dcc.Graph(id='graph1')),
        dbc.Col(dcc.Graph(id='graph2')),
        dbc.Col(dcc.Graph(id='graph3'))
        ]),
    dbc.Row([
        dbc.Col([html.H6('–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–ª–∞–¥–∞ –ø–æ –≥–æ–¥–∞–º'), dcc.Graph(id='graph4')]),
        dbc.Col([html.H6('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º'), dcc.Graph(id='graph5')])
    ])
]

#–≤—Ç–æ—Ä–∞—è –≤–∫–ª–∞–¥–∫–∞
tab2_content = dbc.Row([html.H4('–¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏', style = {'margin-bottom': 30}), html.Div(tbl)])

#—Ç—Ä–µ—Ç—å—è –≤–∫–ª–∞–¥–∫–∞
table_header = [
    html.Thead(html.Tr([html.Th('–ò–º—è –∫–æ–ª–æ–Ω–∫–∏'), html.Th('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ')]))
]
dict_explain = {'work_year':'–ì–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö',
                'job_title':'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏. –ü–æ–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑–±—Ä–æ—Å–∞ –∑–∞—Ä–ø–ª–∞—Ç —Ä–∞–∑–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏',
                'job_category':'–ë–æ–ª–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏',
                'salary_currency':'–í–∞–ª—é—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã',
                'salary':'–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥ –¥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –≤ –º–µ—Å—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ',
                'salary_in_usd':'–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥ –¥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –¥–æ–ª–ª–∞—Ä—ã –°–®–ê',
                'employee_residence':'–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞',
                'experience_level':'–£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã. –í–∫–ª—é—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î–∂—É–Ω", "–ú–∏–¥–ª","–°–∏–Ω–∏–æ—Ä" –∏ "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"',
                'employment_type':'–¢–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: "–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", "–ß–∞—Å—Ç–∏–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å" –∏ —Ç.–¥.',
                'work_setting':'–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: "—É–¥–∞–ª–µ–Ω–∫–∞", "–≥–∏–±—Ä–∏–¥" –∏–ª–∏ "–æ—Ñ–∏—Å"',
                'company_location':'–°—Ç—Ä–∞–Ω–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏',
                'company_size':'–†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: –º–∞–ª–µ–Ω—å–∫–∞—è(S), —Å—Ä–µ–¥–Ω—è—è(M), –∫—Ä—É–ø–Ω–∞—è(L)'}

table_rows = []
for i in dict_explain:
    table_rows.append(html.Tr([html.Td(i), html.Td(dict_explain[i])]))
table_body = [html.Tbody(table_rows)]
table = dbc.Table(table_header + table_body, bordered=True)

text_for_tab3 = '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–∑—è—Ç—ã —Å —Å–∞–π—Ç–∞ Kaggle'
tab3_content = [dbc.Row(html.A(text_for_tab3, href = 'https://www.kaggle.com/datasets/hummaamqaasim/jobs-in-data'), style = {'margin-bottom': 30}),
                dbc.Row(html.Div(children = table), style = {'margin-bottom': 30})]

#–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.layout = html.Div([

    dbc.Row(html.H1(children = '–î–∞–Ω–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ üßë‚Äçüíª'), style = {'margin-bottom': 20}),
    dbc.Row(html.H4(children = '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –¥–∞—Ç–∞-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω'), style = {'margin-bottom': 20}),
    dbc.Tabs([dbc.Tab(tab1_content, label = '–ì—Ä–∞—Ñ–∏–∫–∏'), 
              dbc.Tab(tab2_content, label = '–î–∞–Ω–Ω—ã–µ'),
              dbc.Tab(tab3_content, label = '–°–æ—Å—Ç–∞–≤ –¥–∞–Ω–Ω—ã—Ö')],
                style = {'margin-bottom': 30})
])

#–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
@callback(
    Output(component_id = 'graph1', component_property = 'figure'),
    Input(component_id = 'dropdown_country', component_property = 'value'),
    Input(component_id = 'dropdown_job', component_property = 'value')
)

def update_fig1_chart(country, job_title):
    final_df = data[(data['company_location'] == country) & (data['job_title'] == job_title)]
    min_salary = final_df['month_salary'].min()
    figure = go.Figure(go.Indicator(mode = 'number', value = min_salary, title = {'text': '–ú–∏–Ω–∏–º—É–º'}, 
                                    number = {'font_color':'#8E1AAA', 'font_size':100}))
    figure.update_layout(template = graphs_template)

    return figure

#–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
@callback(
    Output(component_id = 'graph2', component_property = 'figure'),
    Input(component_id = 'dropdown_country', component_property = 'value'),
    Input(component_id = 'dropdown_job', component_property = 'value')
)

def update_fig2_chart(country, job_title):
    final_df = data[(data['company_location'] == country) & (data['job_title'] == job_title)]
    mean_salary = final_df['month_salary'].mean()
    figure = go.Figure(go.Indicator(mode = 'number', value = mean_salary, title = {'text': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞'},
                                    number = {'font_color':'#8E1AAA', 'font_size':100}))
    figure.update_layout(template = graphs_template)

    return figure

#–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–ª—è —Ç—Ä–µ—Ç—å–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
@callback(
    Output(component_id = 'graph3', component_property = 'figure'),
    Input(component_id = 'dropdown_country', component_property = 'value'),
    Input(component_id = 'dropdown_job', component_property = 'value')
)

def update_fig3_chart(country, job_title):
    final_df = data[(data['company_location'] == country) & (data['job_title'] == job_title)]
    max_salary = final_df['month_salary'].max()
    figure = go.Figure(go.Indicator(mode = 'number', value = max_salary, title = {'text': '–ú–∞–∫—Å–∏–º—É–º'},
                                    number = {'font_color':'#8E1AAA', 'font_size':100}))
    figure.update_layout(template = graphs_template)

    return figure


#–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
@callback(
    Output(component_id = 'graph4', component_property = 'figure'),
    Input(component_id = 'dropdown_country', component_property = 'value'),
    Input(component_id = 'dropdown_job', component_property = 'value')
)

def update_fig4_chart(country, job_title):
    final_df = data[(data['company_location'] == country) & (data['job_title'] == job_title)].groupby('work_year', as_index = False).agg({'salary_in_usd':'mean'})
    figure = px.line(final_df, x='work_year', y = 'salary_in_usd', color_discrete_sequence=color_values,
                     labels={
                     'work_year': '–ì–æ–¥',
                     'salary_in_usd': '–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê'
                 })
    figure.update_layout(template = graphs_template)

    return figure


#–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–ª—è –ø—è—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
@callback(
    Output(component_id = 'graph5', component_property = 'figure'),
    Input(component_id = 'dropdown_country', component_property = 'value')
)

def update_fig5_chart(country):
    final_df = data[data['company_location'] == country].groupby(['experience_level', 'job_title'], as_index = False)['month_salary'].mean().round().sort_values(by = 'month_salary')
    figure = px.bar(bar_graph_df, x='experience_level', y='month_salary', color = 'job_title',  barmode='group', color_discrete_sequence=color_values,
                    labels={
                     'experience_level': '–£—Ä–æ–≤–Ω–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã',
                     'month_salary': '–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –º–µ—Å—è—Ü',
                     'job_title':'–î–æ–ª–∂–Ω–æ—Å—Ç—å'
                 })
    figure.update_layout(template = graphs_template)

    return figure


if __name__ == '__main__':
    app.run(debug=True, port = 8051)
